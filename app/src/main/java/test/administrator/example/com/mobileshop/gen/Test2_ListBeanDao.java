package test.administrator.example.com.mobileshop.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import test.administrator.example.com.mobileshop.db.Test2_ListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEST2__LIST_BEAN".
*/
public class Test2_ListBeanDao extends AbstractDao<Test2_ListBean, Long> {

    public static final String TABLENAME = "TEST2__LIST_BEAN";

    /**
     * Properties of entity Test2_ListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property List_id = new Property(0, Long.class, "list_id", true, "_id");
        public final static Property Des = new Property(1, String.class, "des", false, "DES");
        public final static Property Link_tel = new Property(2, String.class, "link_tel", false, "LINK_TEL");
        public final static Property Type_def = new Property(3, String.class, "type_def", false, "TYPE_DEF");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Id = new Property(5, int.class, "id", false, "ID");
        public final static Property Link_name = new Property(6, String.class, "link_name", false, "LINK_NAME");
        public final static Property No_prefix = new Property(7, String.class, "no_prefix", false, "NO_PREFIX");
    }


    public Test2_ListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public Test2_ListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEST2__LIST_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: list_id
                "\"DES\" TEXT," + // 1: des
                "\"LINK_TEL\" TEXT," + // 2: link_tel
                "\"TYPE_DEF\" TEXT," + // 3: type_def
                "\"NAME\" TEXT," + // 4: name
                "\"ID\" INTEGER NOT NULL ," + // 5: id
                "\"LINK_NAME\" TEXT," + // 6: link_name
                "\"NO_PREFIX\" TEXT);"); // 7: no_prefix
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEST2__LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Test2_ListBean entity) {
        stmt.clearBindings();
 
        Long list_id = entity.getList_id();
        if (list_id != null) {
            stmt.bindLong(1, list_id);
        }
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(2, des);
        }
 
        String link_tel = entity.getLink_tel();
        if (link_tel != null) {
            stmt.bindString(3, link_tel);
        }
 
        String type_def = entity.getType_def();
        if (type_def != null) {
            stmt.bindString(4, type_def);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindLong(6, entity.getId());
 
        String link_name = entity.getLink_name();
        if (link_name != null) {
            stmt.bindString(7, link_name);
        }
 
        String no_prefix = entity.getNo_prefix();
        if (no_prefix != null) {
            stmt.bindString(8, no_prefix);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Test2_ListBean entity) {
        stmt.clearBindings();
 
        Long list_id = entity.getList_id();
        if (list_id != null) {
            stmt.bindLong(1, list_id);
        }
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(2, des);
        }
 
        String link_tel = entity.getLink_tel();
        if (link_tel != null) {
            stmt.bindString(3, link_tel);
        }
 
        String type_def = entity.getType_def();
        if (type_def != null) {
            stmt.bindString(4, type_def);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindLong(6, entity.getId());
 
        String link_name = entity.getLink_name();
        if (link_name != null) {
            stmt.bindString(7, link_name);
        }
 
        String no_prefix = entity.getNo_prefix();
        if (no_prefix != null) {
            stmt.bindString(8, no_prefix);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Test2_ListBean readEntity(Cursor cursor, int offset) {
        Test2_ListBean entity = new Test2_ListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // list_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // des
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // link_tel
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type_def
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.getInt(offset + 5), // id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // link_name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // no_prefix
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Test2_ListBean entity, int offset) {
        entity.setList_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDes(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLink_tel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType_def(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setId(cursor.getInt(offset + 5));
        entity.setLink_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNo_prefix(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Test2_ListBean entity, long rowId) {
        entity.setList_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Test2_ListBean entity) {
        if(entity != null) {
            return entity.getList_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Test2_ListBean entity) {
        return entity.getList_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
